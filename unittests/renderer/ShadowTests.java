package renderer;

import static java.awt.Color.*;

import lighting.DirectionalLight;
import lighting.PointLight;
import org.junit.jupiter.api.Test;

import geometries.*;
import lighting.AmbientLight;
import lighting.SpotLight;
import primitives.*;
import scene.Scene;

/** Testing basic shadows
 * @author Dan */
public class ShadowTests {
   /** Scene of the tests */
   private final Scene          scene      = new Scene("Test scene");
   /** Camera builder of the tests */
   private final Camera.Builder camera     = Camera.getBuilder()
      .setDirection(Point.ZERO, Vector.Y)
      .setLocation(new Point(0, 0, 1000)).setVpDistance(1000)
      .setVpSize(200, 200)
      .setRayTracer(new SimpleRayTracer(scene));

   /** The sphere in the tests */
   private final Intersectable  sphere     = new Sphere(60d, new Point(0, 0, -200))
      .setEmission(new Color(BLUE))
      .setMaterial(new Material().setKd(0.5).setKs(0.5).setShininess(30));
   /** The material of the triangles in the tests */
   private final Material       trMaterial = new Material().setKd(0.5).setKs(0.5).setShininess(30);

   /** Helper function for the tests in this module
    * @param pictName     the name of the picture generated by a test
    * @param triangle     the triangle in the test
    * @param spotLocation the spotlight location in the test */
   private void sphereTriangleHelper(String pictName, Triangle triangle, Point spotLocation) {
      scene.geometries.add(sphere, triangle.setEmission(new Color(BLUE)).setMaterial(trMaterial));
      scene.lights.add( //
                       new SpotLight(new Color(400, 240, 0), spotLocation, new Vector(1, 1, -3)) //
                          .setKl(1E-5).setKq(1.5E-7));
      camera.setImageWriter(new ImageWriter(pictName, 400, 400))
         .build()
         .renderImage() //
         .writeToImage();
   }

   /** Produce a picture of a sphere and triangle with point light and shade */
   @Test
   public void sphereTriangleInitial() {
      sphereTriangleHelper("shadowSphereTriangleInitial", //
                           new Triangle(
                                   new Point(-70, -40, 0),
                                   new Point(-40, -70, 0),
                                   new Point(-68, -68, -4)
                           ),
                           new Point(-100, -100, 200));
   }
   /** Sphere-Triangle shading - move triangle up-right */
   @Test
   public void sphereTriangleMove1() {
      sphereTriangleHelper("shadowSphereTriangleMove1",
              new Triangle(
                      new Point(-57, -27, 4),
                      new Point(-27, -57, 4),
                      new Point(-55, -55, 0)
              ),
              new Point(-100, -100, 200));
   }

   /** Sphere-Triangle shading - move triangle upper-righter */
   @Test
   public void sphereTriangleMove2() {
      sphereTriangleHelper("shadowSphereTriangleMove2", //
              new Triangle(
                      new Point(-44, -14, 8),
                      new Point(-14, -44, 8),
                      new Point(-42, -42, 4)
              ),
                           new Point(-100, -100, 200));
   }

   /** Sphere-Triangle shading - move spot closer */
   @Test
   public void sphereTriangleSpot1() {
      sphereTriangleHelper("shadowSphereTriangleSpot1", //
                           new Triangle(new Point(-70, -40, 0), new Point(-40, -70, 0), new Point(-68, -68, -4)), //
                           new Point(-81, -81, 99));
   }

   /** Sphere-Triangle shading - move spot even more close */
   @Test
   public void sphereTriangleSpot2() {
      sphereTriangleHelper("shadowSphereTriangleSpot2", //
                           new Triangle(new Point(-70, -40, 0), new Point(-40, -70, 0), new Point(-68, -68, -4)), //
                           new Point(-72, -72, 50));
   }

   /** Produce a picture of two triangles lighted by a spotlight with a Sphere
    * producing a shading */
   @Test
   public void trianglesSphere() {
      scene.geometries.add(
                           new Triangle(new Point(-150, -150, -115), new Point(150, -150, -135),
                                        new Point(75, 75, -150)) //
                              .setMaterial(new Material().setKs(0.8).setShininess(60)), //
                           new Triangle(new Point(-150, -150, -115), new Point(-70, 70, -140), new Point(75, 75, -150)) //
                              .setMaterial(new Material().setKs(0.8).setShininess(60)), //
                           new Sphere(30d, new Point(0, 0, -11)) //
                              .setEmission(new Color(BLUE)) //
                              .setMaterial(new Material().setKd(0.5).setKs(0.5).setShininess(30)) //
      );
      scene.setAmbientLight(new AmbientLight(new Color(WHITE), 0.15));
      scene.lights.add(
                       new SpotLight(new Color(700, 400, 400), new Point(40, 40, 115), new Vector(-1, -1, -4)) //
                          .setKl(4E-4).setKq(2E-5));

      camera.setImageWriter(new ImageWriter("shadowTrianglesSphere", 600, 600))
         .build()
         .renderImage()
         .writeToImage();
   }

   /** experimenting with making an image *//*
   @Test
   public void tempTest() {
      Material material1 = new Material().setKs(0.5).setKd(0.5).setKt(1).setKr(0).setShininess(1);
      Material material2 = new Material().setKs(0.5).setKd(0.5).setKt(1).setKr(0.5).setShininess(20);

      Plane plane = new Plane(new Point(0,0,0), new Vector(1,0,0));
      plane.setEmission(new Color(BLUE).scale(0.5))
              .setMaterial(material1);

      Sphere sphere1 = new Sphere(2, new Point(2,0,0));
      sphere1.setEmission(new Color(WHITE))
              .setMaterial(material2);
      PointLight pointLight = new PointLight(new Color(YELLOW), new Point(0,2,2));
      DirectionalLight directionalLight = new DirectionalLight(new Color(YELLOW).scale(0.3), new Vector(-1,0,0));
      Scene scene = new Scene("plain");
      scene.setBackground(new Color(BLACK))
              .setAmbientLight(new AmbientLight(new Color(10,10,10), 0.1))
              .setGeometries(new Geometries(plane, sphere1));
      scene.lights.add(pointLight);
      scene.lights.add(directionalLight);

      Camera.Builder camera = Camera.getBuilder()
              .setImageWriter(new ImageWriter("tmp2", 800, 800))
              .setRayTracer(new SimpleRayTracer(scene))
              .setVpSize(5,5)
              .setVpDistance(5)
              .setLocation(new Point(10,0,0))
              .setDirection(new Vector(-1,0,0), new Vector(0,0,1));
      camera.build().renderImage().writeToImage();
   }*/

   @Test
   public void stage7Test() {
      Scene scene = new Scene("memory balls");

      Material ballMaterial = new Material().setKs(0.5).setKd(0.5).setShininess(20);
      Material wallMaterial = new Material().setKs(0.5).setKd(0.5).setShininess(10).setKr(0.5);
      Material clearGlass = new Material().setKt(0.7).setShininess(30).setKs(0.7).setKd(0.3);
      Color lightColor = new Color(180,132,120);
      Color tube = new Color(0,0,10);
      Color gold = new Color(100, 75, 0);
      Color red = new Color(175, 0, 0);
      Color blue = new Color(0, 0, 175);
      Color green = new Color(0, 100, 75);
      Color purple = new Color(20, 0, 45);

      Point center1 = new Point(-8.2,0,2.5);
      Point center2 = new Point(-7,0,-2.5);
      Ray axis1 = new Ray(center1, Vector.X);
      Ray axis2 = new Ray(center2, Vector.X);
      Geometry tube1 = new Tube(2.2, axis1).setMaterial(clearGlass).setEmission(tube);
      Geometry tube2 = new Tube(2.2, axis2).setMaterial(clearGlass).setEmission(tube);
      Geometry floor = new Plane(new Point(0,0,-5.5), Vector.Z)
              .setMaterial(wallMaterial).setEmission(purple);
      Geometry wall = new Plane(new Point(0,-2.5,0), Vector.Y)
              .setMaterial(ballMaterial).setEmission(purple);
      scene.geometries.add(tube1, tube2, floor, wall);

      Point[] points = new Point[8];
      points[0] = new Point(-11,-2,0.1);
      points[1] = new Point(11,-2,0.1);
      points[2] = new Point(11,2,0.1);
      points[3] = new Point(-11,2,0.1);
      points[4] = new Point(-11,-2,-0.1);
      points[5] = new Point(11,-2,-0.1);
      points[6] = new Point(11,2,-0.1);
      points[7] = new Point(-11,2,-0.1);

      Geometry triangle1 = new Triangle(points[0],points[1],points[2]).setMaterial(wallMaterial).setEmission(purple);
      Geometry triangle2 = new Triangle(points[2],points[3],points[0]).setMaterial(wallMaterial).setEmission(purple);
      Geometry triangle3 = new Triangle(points[4],points[5],points[6]).setMaterial(wallMaterial).setEmission(purple);
      Geometry triangle4 = new Triangle(points[6],points[7],points[4]).setMaterial(wallMaterial).setEmission(purple);
      Geometry triangle5 = new Triangle(points[3],points[2],points[6]).setMaterial(wallMaterial).setEmission(purple);
      Geometry triangle6 = new Triangle(points[6],points[7],points[3]).setMaterial(wallMaterial).setEmission(purple);

      Vector add  = new Vector(0,0,5.2);
      for (int i = 0; i < 8; i++) {
         points[i] = points[i].add(add);
      }

      Geometry triangle1b = new Triangle(points[0],points[1],points[2]).setMaterial(wallMaterial).setEmission(purple);
      Geometry triangle2b = new Triangle(points[2],points[3],points[0]).setMaterial(wallMaterial).setEmission(purple);
      Geometry triangle3b = new Triangle(points[4],points[5],points[6]).setMaterial(wallMaterial).setEmission(purple);
      Geometry triangle4b = new Triangle(points[6],points[7],points[4]).setMaterial(wallMaterial).setEmission(purple);
      Geometry triangle5b = new Triangle(points[3],points[2],points[6]).setMaterial(wallMaterial).setEmission(purple);
      Geometry triangle6b = new Triangle(points[6],points[7],points[3]).setMaterial(wallMaterial).setEmission(purple);

      scene.geometries.add(triangle1,triangle2,triangle3,triangle4,triangle5,triangle6);
      scene.geometries.add(triangle1b,triangle2b,triangle3b,triangle4b,triangle5b,triangle6b);

      Geometry[] spheres1 = new Geometry[4];
      Geometry[] spheres2 = new Geometry[4];
      for (int i = 0; i < 4; i++) {
         spheres1[i] = new Sphere(2, axis1.getPoint(i * 4.1))
                 .setMaterial(ballMaterial).setEmission(gold);
         scene.geometries.add(spheres1[i]);
      }
      for (int i = 0; i < 4; i++) {
         spheres2[i] = new Sphere(2, axis2.getPoint(i * 4.1))
                 .setMaterial(ballMaterial);
         scene.geometries.add(spheres2[i]);
      }
      spheres1[0].setEmission(red);
      spheres1[1].setEmission(gold);
      spheres1[2].setEmission(gold);
      spheres1[3].setEmission(green);
      spheres2[0].setEmission(gold);
      spheres2[1].setEmission(gold);
      spheres2[2].setEmission(blue);
      spheres2[3].setEmission(gold);

      PointLight pl1 = new PointLight(lightColor,new Point(4,8,3));
      PointLight pl2 = new PointLight(lightColor,new Point(-4,8,-3));
      DirectionalLight dl = new DirectionalLight(new Color(ORANGE).scale(0.8), new Vector(0,-1,0));

      scene.lights.add(pl1);
      scene.lights.add(pl2);
      scene.lights.add(dl);

      Point camLocation = new Point(8,16,2);

      Camera cam = Camera.getBuilder()
              .setImageWriter(new ImageWriter("stage7final",800,800))
              .setRayTracer(new SimpleRayTracer(scene))
              .setVpSize(30,30)
              .setVpDistance(40)
              .setLocation(camLocation)
              .setDirection(new Point(0,0,-1), new Vector(-1,-1,8))
              .build();
      cam.renderImage().writeToImage();
   }
}
