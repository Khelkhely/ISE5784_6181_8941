package renderer;

import static java.awt.Color.*;

import lighting.DirectionalLight;
import lighting.PointLight;
import org.junit.jupiter.api.Test;

import geometries.*;
import lighting.AmbientLight;
import lighting.SpotLight;
import primitives.*;
import scene.Scene;



/** Testing basic shadows
 * @author Dan */
public class ShadowTests {
   /** Scene of the tests */
   private final Scene          scene      = new Scene("Test scene");
   /** Camera builder of the tests */
   private final Camera.Builder camera     = Camera.getBuilder()
      .setDirection(Point.ZERO, Vector.Y)
      .setLocation(new Point(0, 0, 1000)).setVpDistance(1000)
      .setVpSize(200, 200)
      .setRayTracer(new SimpleRayTracer(scene));

   /** The sphere in the tests */
   private final Intersectable  sphere     = new Sphere(60d, new Point(0, 0, -200))
      .setEmission(new Color(BLUE))
      .setMaterial(new Material().setKd(0.5).setKs(0.5).setShininess(30));
   /** The material of the triangles in the tests */
   private final Material       trMaterial = new Material().setKd(0.5).setKs(0.5).setShininess(30);

   /** Helper function for the tests in this module
    * @param pictName     the name of the picture generated by a test
    * @param triangle     the triangle in the test
    * @param spotLocation the spotlight location in the test */
   private void sphereTriangleHelper(String pictName, Triangle triangle, Point spotLocation) {
      scene.geometries.add(sphere, triangle.setEmission(new Color(BLUE)).setMaterial(trMaterial));
      scene.lights.add( //
                       new SpotLight(new Color(400, 240, 0), spotLocation, new Vector(1, 1, -3)) //
                          .setKl(1E-5).setKq(1.5E-7));
      camera.setImageWriter(new ImageWriter(pictName, 400, 400))
         .build()
         .renderImage() //
         .writeToImage();
   }

   /** Produce a picture of a sphere and triangle with point light and shade */
   @Test
   public void sphereTriangleInitial() {
      sphereTriangleHelper("shadowSphereTriangleInitial", //
                           new Triangle(
                                   new Point(-70, -40, 0),
                                   new Point(-40, -70, 0),
                                   new Point(-68, -68, -4)
                           ),
                           new Point(-100, -100, 200));
   }
   /** Sphere-Triangle shading - move triangle up-right */
   @Test
   public void sphereTriangleMove1() {
      sphereTriangleHelper("shadowSphereTriangleMove1",
              new Triangle(
                      new Point(-57, -27, 4),
                      new Point(-27, -57, 4),
                      new Point(-55, -55, 0)
              ),
              new Point(-100, -100, 200));
   }

   /** Sphere-Triangle shading - move triangle upper-righter */
   @Test
   public void sphereTriangleMove2() {
      sphereTriangleHelper("shadowSphereTriangleMove2", //
              new Triangle(
                      new Point(-44, -14, 8),
                      new Point(-14, -44, 8),
                      new Point(-42, -42, 4)
              ),
                           new Point(-100, -100, 200));
   }

   /** Sphere-Triangle shading - move spot closer */
   @Test
   public void sphereTriangleSpot1() {
      sphereTriangleHelper("shadowSphereTriangleSpot1", //
                           new Triangle(new Point(-70, -40, 0), new Point(-40, -70, 0), new Point(-68, -68, -4)), //
                           new Point(-81, -81, 99));
   }

   /** Sphere-Triangle shading - move spot even more close */
   @Test
   public void sphereTriangleSpot2() {
      sphereTriangleHelper("shadowSphereTriangleSpot2", //
                           new Triangle(new Point(-70, -40, 0), new Point(-40, -70, 0), new Point(-68, -68, -4)), //
                           new Point(-72, -72, 50));
   }

   /** Produce a picture of a two triangles lighted by a spot light with a Sphere
    * producing a shading */
   @Test
   public void trianglesSphere() {
      scene.geometries.add(
                           new Triangle(new Point(-150, -150, -115), new Point(150, -150, -135),
                                        new Point(75, 75, -150)) //
                              .setMaterial(new Material().setKs(0.8).setShininess(60)), //
                           new Triangle(new Point(-150, -150, -115), new Point(-70, 70, -140), new Point(75, 75, -150)) //
                              .setMaterial(new Material().setKs(0.8).setShininess(60)), //
                           new Sphere(30d, new Point(0, 0, -11)) //
                              .setEmission(new Color(BLUE)) //
                              .setMaterial(new Material().setKd(0.5).setKs(0.5).setShininess(30)) //
      );
      scene.setAmbientLight(new AmbientLight(new Color(WHITE), 0.15));
      scene.lights.add(
                       new SpotLight(new Color(700, 400, 400), new Point(40, 40, 115), new Vector(-1, -1, -4)) //
                          .setKl(4E-4).setKq(2E-5));

      camera.setImageWriter(new ImageWriter("shadowTrianglesSphere", 600, 600))
         .build()
         .renderImage()
         .writeToImage();
   }

   /** experimenting with making an image */
   @Test
   public void tempTest() {
      Scene scene = new Scene("glass pyramid");
      Camera.Builder camBuild = Camera.getBuilder()
              .setImageWriter(new ImageWriter("tmp",800,800))
              .setRayTracer(new SimpleRayTracer(scene))
              .setVpSize(5,5)
              .setVpDistance(10);

      Point camLocation = new Point(15, 15, 10);

      //Material mirror = new Material().setKs(0.6).setKd(0.4).setShininess(50).setKr(1);
      Material ball = new Material().setKs(0.6).setKd(0.4).setShininess(20).setKr(0.2);
      Material wallMaterial = new Material().setKs(0.5).setKd(0.5).setShininess(30).setKr(0.2);
      Material clearGlass = new Material().setKt(0.95).setShininess(30).setKs(0.6).setKd(0.4);

      Plane plane = new Plane(new Point(0,0,0), Vector.Z);
      Point[] centers = new Point[3];
      centers[0] = new Point(-6, -6, 3);
      centers[2] = new Point(-6, -6, -2);
      centers[1] = new Point(-8, -5.5, 8);
      Sphere s1;
      Ray axis;
      Sphere s2, s3, s4, s5;
      Tube tube;
      Point p1,p2,p3,p4;
      Triangle t1, t2;
      Color gold = new Color(60, 55, 0);
      Color purple = new Color(50, 0, 50);
      Vector direction = new Vector(-4, 1, 0);
      Vector normal = new Vector(1,4,0);
      Vector offset1 = direction.scale(10).add(normal.scale(-1)).add(new Vector(0,0,-2.5));
      Vector offset2 = direction.scale(-10).add(normal.scale(-1)).add(new Vector(0,0,-2.5));
      for (int i = 0; i < 2; i++) {
         axis = new Ray(centers[i], direction);
         tube = new Tube(2.2, axis);
         s1 = new Sphere(2, centers[i]);
         s2 = new Sphere(2, axis.getPoint(4.5));
         s3 = new Sphere(2, axis.getPoint(-4.5));
         s4 = new Sphere(2, axis.getPoint(9));
         s5 = new Sphere(2, axis.getPoint(-9));
         p1 = centers[i].add(offset1);
         p2 = centers[i].add(offset2);
         p3 = p2.add(normal);
         p4 = p1.add(normal);
         t1 = new Triangle(p1,p2,p3);
         t2 = new Triangle(p3,p4,p1);
         scene.geometries.add(tube.setMaterial(clearGlass).setEmission(new Color(30,30,30)));
         scene.geometries.add(s1.setMaterial(ball).setEmission(gold));
         scene.geometries.add(s2.setMaterial(ball).setEmission(gold));
         scene.geometries.add(s3.setMaterial(ball).setEmission(gold));
         scene.geometries.add(s4.setMaterial(ball).setEmission(gold));
         scene.geometries.add(s5.setMaterial(ball).setEmission(gold));
         scene.geometries.add(t1.setMaterial(wallMaterial).setEmission(purple));
         scene.geometries.add(t2.setMaterial(wallMaterial).setEmission(purple));
      }


      Plane wall = new Plane(centers[0].add(normal.scale(-1)),normal);

      scene.geometries.add(plane.setMaterial(wallMaterial).setEmission(purple));
      scene.geometries.add(wall.setMaterial(wallMaterial).setEmission(purple));


      Color lightColor = new Color(100, 100, 100);
      //PointLight pl1 = new PointLight(lightColor, centers[0].add(camLocation.subtract(centers[0]).scale(0.5)));
      //PointLight pl2 = new PointLight(lightColor, centers[2].add(camLocation.subtract(centers[0]).scale(0.5)));
      //Point p0 = centers[0].add(Vector.Z.scale(10));
      //scene.lights.add(pl1);
      //scene.lights.add(pl2);
      SpotLight sl1 = new SpotLight(lightColor,new Point(-3,0,10), new Vector(-4,-1,-3));
      SpotLight sl2 = new SpotLight(lightColor,new Point(-3,0,8), new Vector(-1,-4,-3));
      scene.lights.add(sl1);
      scene.lights.add(sl2);
      scene.ambientLight = new AmbientLight(new Color(10,10,10), 0.1);
      scene.setBackground(Color.BLACK);

      Camera cam1 = camBuild
              .setLocation(camLocation)
              .setDirection(centers[0], new Vector(-1,-1,6))
              .build();
      cam1.renderImage().writeToImage();
   }
}
